% 4.1
% create DH table (assume thetas are 0.0 for now)
DH = [0.0, 0.76, 0.0, pi/2;
    0.0, -0.2365, 0.4323, 0.0;
    0.0, 0.0, 0.0, pi/2;
    0.0, 0.4318, 0.0, -pi/2;
    0.0, 0.0, 0.0, pi/2;
    0.0, 0.2, 0.0, 0.0];
% create instance of puma560
myrobot = mypuma560(DH);

% 4.2
% linearly interpolate joint space targets
q_1 = linspace(0, pi, 200);
q_2 = linspace(0, pi/2, 200);
q_3 = linspace(0, pi, 200);
q_4 = linspace(pi/4, 3*pi/4, 200);
q_5 = linspace(-pi/3, pi/3, 200);
q_6 = linspace(0, 2*pi, 200);
% create combined joint target matrix
q = [q_1; q_2; q_3; q_4; q_5; q_6]';

% 4.3
% create empty position matrix
o = zeros(200, 3);
% populate position matrix with position at each timestep
for i = 1:size(q, 1)
    % use forward kinematics to calculate EE pose
    H = forward(q(i, :)', myrobot);
    % extract position from EE pose
    o(i, :) = H(1:3, 4)';
end

% plot EE position
plot3(o(:,1),o(:,2),o(:,3),'r')
hold on
% plot robot trajectory
plot(myrobot, q)

% 4.4
% desired pose
H = [cos(pi/4) -sin(pi/4) 0 0.2; 
    sin(pi/4) cos(pi/4) 0 0.23; 
    0 0 1 0.15; 
    0 0 0 1];
% calculate inverse kinematics
q = inverse(H, myrobot);
% get pose from calculated inverse kinematics
H_calc = forward(q', myrobot); 
% verify that pose is equal to desired pose
all(ismembertol(H_calc, H, 1e-5), 'all')

% linearly interpolate position 
num_steps = 100;

x = linspace(0.10, 0.30, num_steps);
y = linspace(0.23, 0.30, num_steps);
z = linspace(0.15, 1.0, num_steps);

o = [x; y; z]';

R = [cos(pi/4), -sin(pi/4), 0;
     sin(pi/4), cos(pi/4),  0;
     0,          0,           1];
 
q = zeros(num_steps, 6);

for i = 1:num_steps
    H = eye(4);
    H(1:3, 1:3) = R;
    H(1:3, 4) = o(i, :);
    q(i, :) = inverse(H, myrobot);
end

%plot(myrobot, q)
